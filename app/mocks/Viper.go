// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	viper "github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
)

// Viper is an autogenerated mock type for the Viper type
type Viper struct {
	mock.Mock
}

// AddConfigPath provides a mock function with given fields: _a0
func (_m *Viper) AddConfigPath(_a0 string) {
	_m.Called(_a0)
}

// ReadInConfig provides a mock function with given fields:
func (_m *Viper) ReadInConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *Viper) Set(_a0 string, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// SetConfigName provides a mock function with given fields: _a0
func (_m *Viper) SetConfigName(_a0 string) {
	_m.Called(_a0)
}

// SetConfigType provides a mock function with given fields: _a0
func (_m *Viper) SetConfigType(_a0 string) {
	_m.Called(_a0)
}

// UnmarshalKey provides a mock function with given fields: _a0, _a1, _a2
func (_m *Viper) UnmarshalKey(_a0 string, _a1 interface{}, _a2 ...viper.DecoderConfigOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...viper.DecoderConfigOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteConfigAs provides a mock function with given fields: _a0
func (_m *Viper) WriteConfigAs(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
