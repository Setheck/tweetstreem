// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	twitter "github.com/Setheck/tweetstreem/twitter"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// TwitterClient is an autogenerated mock type for the TwitterClient type
type TwitterClient struct {
	mock.Mock
}

// Authorize provides a mock function with given fields:
func (_m *TwitterClient) Authorize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configuration provides a mock function with given fields:
func (_m *TwitterClient) Configuration() twitter.TwitterConfiguration {
	ret := _m.Called()

	var r0 twitter.TwitterConfiguration
	if rf, ok := ret.Get(0).(func() twitter.TwitterConfiguration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(twitter.TwitterConfiguration)
	}

	return r0
}

// HomeTimeline provides a mock function with given fields: conf
func (_m *TwitterClient) HomeTimeline(conf url.Values) ([]*twitter.Tweet, error) {
	ret := _m.Called(conf)

	var r0 []*twitter.Tweet
	if rf, ok := ret.Get(0).(func(url.Values) []*twitter.Tweet); ok {
		r0 = rf(conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*twitter.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(url.Values) error); ok {
		r1 = rf(conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like provides a mock function with given fields: tw, conf
func (_m *TwitterClient) Like(tw *twitter.Tweet, conf url.Values) error {
	ret := _m.Called(tw, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*twitter.Tweet, url.Values) error); ok {
		r0 = rf(tw, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReTweet provides a mock function with given fields: tw, conf
func (_m *TwitterClient) ReTweet(tw *twitter.Tweet, conf url.Values) error {
	ret := _m.Called(tw, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*twitter.Tweet, url.Values) error); ok {
		r0 = rf(tw, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScreenName provides a mock function with given fields:
func (_m *TwitterClient) ScreenName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *TwitterClient) Shutdown() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPollerPaused provides a mock function with given fields: b
func (_m *TwitterClient) SetPollerPaused(b bool) {
	_m.Called(b)
}

// UnLike provides a mock function with given fields: tw, conf
func (_m *TwitterClient) UnLike(tw *twitter.Tweet, conf url.Values) error {
	ret := _m.Called(tw, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*twitter.Tweet, url.Values) error); ok {
		r0 = rf(tw, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnReTweet provides a mock function with given fields: tw, conf
func (_m *TwitterClient) UnReTweet(tw *twitter.Tweet, conf url.Values) error {
	ret := _m.Called(tw, conf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*twitter.Tweet, url.Values) error); ok {
		r0 = rf(tw, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: status, conf
func (_m *TwitterClient) UpdateStatus(status string, conf url.Values) (*twitter.Tweet, error) {
	ret := _m.Called(status, conf)

	var r0 *twitter.Tweet
	if rf, ok := ret.Get(0).(func(string, url.Values) *twitter.Tweet); ok {
		r0 = rf(status, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitter.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, url.Values) error); ok {
		r1 = rf(status, conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTimeline provides a mock function with given fields: conf
func (_m *TwitterClient) UserTimeline(conf url.Values) ([]*twitter.Tweet, error) {
	ret := _m.Called(conf)

	var r0 []*twitter.Tweet
	if rf, ok := ret.Get(0).(func(url.Values) []*twitter.Tweet); ok {
		r0 = rf(conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*twitter.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(url.Values) error); ok {
		r1 = rf(conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
